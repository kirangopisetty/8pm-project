{
	"info": {
		"_postman_id": "d97071e9-b734-4bd5-8635-4296b7453f6a",
		"name": "REST APIs-PROJECT",
		"description": "- Project Name: Employees project\n    \n- Type of APIs developed: REST APIs\n    \n- Classification of APIs: Public APIs + Secured APIs + Authorized APIs\n    \n- \\# of APIs developed: 4\n    \n- HTTP methods used: GET, POST, PATCH, DELETE\n    \n- Protocol used: HTTPS\n    \n- Authorization algorithm used: Bearer access token\n    \n- How to get access-token: Login to [https://gorest.co.in/consumer/login](https://gorest.co.in/consumer/login) \n    \n- Names of APIs : LIST USERS (GET), CREATE USER (POST), UPDATE USER (PATCH), DELETE USER (DELETE)\n    \n- API documentation format: cURL\n    \n- API documentation URL: [https://gorest.co.in/](https://gorest.co.in/) \n    \n- Description about APIs:\n    \n    - LIST USERS API : This is a RESTful API that uses GET http method to retrieve/fetch all existing user details from the database server\n        \n    - CREATE USER API : This is a RESTful API that uses POST http method to create a new user in the database server\n        \n    - UPDATE USER API : This is a RESTful API that uses PATCH http method to update an existing user in the database server\n        \n    - DELETE USER API : This is a RESTful API that uses DELETE http method to delete an existing user in the database server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5040522",
		"_collection_link": "https://kiranmm.postman.co/workspace/8PM-Project~bd6d3816-ec05-42f8-831e-2535d21ed8c6/collection/5040522-d97071e9-b734-4bd5-8635-4296b7453f6a?action=share&source=collection_link&creator=5040522"
	},
	"item": [
		{
			"name": "POSITIVE TC",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Shreya\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"shrea@outlook.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Name in the response body is 'Shreya Sandeep Raskar'\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.name).to.equal(\"Shreya Sandeep Raskar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Id in the response body is not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Shreya Sandeep Raskar\",\r\n    \"email\": \"shreya2@outlook.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7845479",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7845479"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7831915",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7831915"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder is used to write the positive test cases for the below RESTful APIs:\n\n1. LIST USERS - GET API\n    \n2. CREATE USER - POST API\n    \n3. UPDATE USER - PATCH API\n    \n4. DELETE USER - DELETE API"
		},
		{
			"name": "DDT-FUNCTIONS",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Name in the response body is 'Shreya Sandeep Raskar'\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.name).to.equal(\"Shreya Sandeep Raskar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Id in the response body is not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}{{$randomFirstName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7848062",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7848062"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder is used to write the positive test cases for the below RESTful APIs:\n\n1. LIST USERS - GET API\n    \n2. CREATE USER - POST API\n    \n3. UPDATE USER - PATCH API\n    \n4. DELETE USER - DELETE API"
		},
		{
			"name": "DDT-CSV",
			"item": [
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updatedName}}\",\r\n    \"email\": \"{{updatedEmail}}\",\r\n    \"status\": \"{{updatedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{idToBeUpdated}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{idToBeUpdated}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{idToBeDeleted}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{idToBeDeleted}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder is used to write the positive test cases for the below RESTful APIs:\n\n1. LIST USERS - GET API\n    \n2. CREATE USER - POST API\n    \n3. UPDATE USER - PATCH API\n    \n4. DELETE USER - DELETE API"
		},
		{
			"name": "INTEROPERABILITY TESTING",
			"item": [
				{
					"name": "LIST USERS API-Windows OS + Edge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.3179.85",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API-Linux OS + Firefox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (X11; Linux i686; rv:137.0) Gecko/20100101 Firefox/137.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"testing\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"compatibility@outlook.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API-Mac OS + Safari",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_7_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.3 Safari/605.1.15",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr.Testing\",\r\n    \"email\": \"interoperabilitytesting@outlook.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7845544",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7845544"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API-Android OS + Chrome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.7049.100 Mobile Safari/537.36",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7845479",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7845479"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Interoperability testing >** Verify if the developed APIs (get, post, put, patch, delete) respond with 2xx success response code when tested across various OS, various browsers, various browser versions. This can be done by using the User-Agent request header."
		},
		{
			"name": "INTEROPERABILITY TESTING-DDT",
			"item": [
				{
					"name": "LIST USERS API-Windows OS + Edge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API-Linux OS + Firefox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"testing\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"compatibilityyy@outlook.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API-Mac OS + Safari",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr.Testing\",\r\n    \"email\": \"interoperabilitytesting@outlook.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7845544",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7845544"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API-Android OS + Chrome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7843384",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7843384"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Interoperability testing >** Verify if the developed APIs (get, post, put, patch, delete) respond with 2xx success response code when tested across various OS, various browsers, various browser versions. This can be done by using the User-Agent request header."
		},
		{
			"name": "INTEROPERABILITY TESTING-FUNCTIONS",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// CAPTURE RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(\"The response code is \"+pm.response.code);\r",
									"console.log(\"The response message is \"+pm.response.status);\r",
									"console.log(\"The response code is \"+pm.response.code+\" \"+pm.response.status);\r",
									"console.log(\"The response time is \"+pm.response.responseTime+\" ms\");\r",
									"console.log(\"The response headers are \");\r",
									"console.log(pm.response.headers);\r",
									"console.log(\"The response body is \")\r",
									"console.log(pm.response.json());\r",
									"console.log(\"The response body size is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"// CAPTURE REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(\"The request name is \"+pm.info.requestName);\r",
									"console.log(\"The request URL is \"+pm.request.url);\r",
									"console.log(\"The request HTTP method used is \"+pm.request.method);\r",
									"console.log(\"The request body used is \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request headers are \");\r",
									"console.log(pm.request.headers);\r",
									"console.log(\"The request body size is \");\r",
									"console.log(pm.request.size());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7845544",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7845544"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7845567",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7845567"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Interoperability testing >** Verify if the developed APIs (get, post, put, patch, delete) respond with 2xx success response code when tested across various OS, various browsers, various browser versions. This can be done by using the User-Agent request header."
		},
		{
			"name": "ENVIRONMENT VARIABLES USAGE",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{envProtocol}}://{{envBaseURL}}/public/v2/users",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// CAPTURE RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(\"The response code is \"+pm.response.code);\r",
									"console.log(\"The response message is \"+pm.response.status);\r",
									"console.log(\"The response code is \"+pm.response.code+\" \"+pm.response.status);\r",
									"console.log(\"The response time is \"+pm.response.responseTime+\" ms\");\r",
									"console.log(\"The response headers are \");\r",
									"console.log(pm.response.headers);\r",
									"console.log(\"The response body is \")\r",
									"console.log(pm.response.json());\r",
									"console.log(\"The response body size is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"// CAPTURE REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(\"The request name is \"+pm.info.requestName);\r",
									"console.log(\"The request URL is \"+pm.request.url);\r",
									"console.log(\"The request HTTP method used is \"+pm.request.method);\r",
									"console.log(\"The request body used is \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request headers are \");\r",
									"console.log(pm.request.headers);\r",
									"console.log(\"The request body size is \");\r",
									"console.log(pm.request.size());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{envName}}\",\r\n    \"gender\": \"{{envGender}}\",\r\n    \"email\": \"{{envEmail}}\",\r\n    \"status\": \"{{envStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envProtocol}}://{{envBaseURL}}/public/v2/users",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envProtocol}}://{{envBaseURL}}/public/v2/users/7863770",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7863770"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{envProtocol}}://{{envBaseURL}}/public/v2/users/7862846",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7862846"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. environment variables can be accessed by all the collections, all the folders, all the APIs within the same workspace and they are actually used in the context of environment usage \\[dev-env, qa-env, uat-env, prod-env\\]\n    \n2. other workspaces cannot access the environment variables of other workspace\n    \n3. we can create environment variables in 3 ways:\n    \n    1. step by step wizard\n        \n    2. manual way\n        \n    3. using java-scripts in pre-request script tab"
		},
		{
			"name": "GLOBAL VARIABLES USAGE",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gProtocol}}://{{gBaseURL}}/public/v2/users",
							"protocol": "{{gProtocol}}",
							"host": [
								"{{gBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// CAPTURE RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(\"The response code is \"+pm.response.code);\r",
									"console.log(\"The response message is \"+pm.response.status);\r",
									"console.log(\"The response code is \"+pm.response.code+\" \"+pm.response.status);\r",
									"console.log(\"The response time is \"+pm.response.responseTime+\" ms\");\r",
									"console.log(\"The response headers are \");\r",
									"console.log(pm.response.headers);\r",
									"console.log(\"The response body is \")\r",
									"console.log(pm.response.json());\r",
									"console.log(\"The response body size is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"// CAPTURE REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(\"The request name is \"+pm.info.requestName);\r",
									"console.log(\"The request URL is \"+pm.request.url);\r",
									"console.log(\"The request HTTP method used is \"+pm.request.method);\r",
									"console.log(\"The request body used is \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request headers are \");\r",
									"console.log(pm.request.headers);\r",
									"console.log(\"The request body size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"// READ GLOBAL VARIABLES & VALUES\r",
									"\r",
									"console.log(\"The value of gName is \"+pm.globals.get(\"gName\"));\r",
									"console.log(\"The value of gGender is \"+pm.globals.get(\"gGender\"));\r",
									"console.log(\"The value of gEmail is \"+pm.globals.get(\"gEmail\"));\r",
									"console.log(\"The value of gStatus is \"+pm.globals.get(\"gStatus\"));\r",
									"\r",
									"// DELETE GLOBAL VARIABLES\r",
									"\r",
									"pm.globals.unset(\"gName\");\r",
									"pm.globals.unset(\"gGender\");\r",
									"pm.globals.unset(\"gEmail\");\r",
									"pm.globals.unset(\"gStatus\");\r",
									"\r",
									"console.log(\"The value of gName after deleting it is \"+pm.globals.get(\"gName\"));\r",
									"console.log(\"The value of gGender after deleting it is \"+pm.globals.get(\"gGender\"));\r",
									"console.log(\"The value of gEmail after deleting it is \"+pm.globals.get(\"gEmail\"));\r",
									"console.log(\"The value of gStatus after deleting it is \"+pm.globals.get(\"gStatus\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// CREATE GLOBAL VARIABLES\r",
									"\r",
									"pm.globals.set(\"gName\", \"Saranya\");\r",
									"pm.globals.set(\"gGender\", \"female\");\r",
									"pm.globals.set(\"gEmail\", \"saranya@gmail.com\");\r",
									"pm.globals.set(\"gStatus\", \"active\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{gName}}\",\r\n    \"gender\": \"{{gGender}}\",\r\n    \"email\": \"{{gEmail}}\",\r\n    \"status\": \"{{gStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gProtocol}}://{{gBaseURL}}/public/v2/users",
							"protocol": "{{gProtocol}}",
							"host": [
								"{{gBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gProtocol}}://{{gBaseURL}}/public/v2/users/7862846",
							"protocol": "{{gProtocol}}",
							"host": [
								"{{gBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7862846"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gProtocol}}://{{gBaseURL}}/public/v2/users/7863715",
							"protocol": "{{gProtocol}}",
							"host": [
								"{{gBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7863715"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. global variables can be accessed by all the collections, all the folders, all the APIs within the same workspace\n    \n2. other workspaces cannot access the global variables of other workspace\n    \n3. we can create global variables in 3 ways:\n    \n    1. step by step wizard\n        \n    2. manual way\n        \n    3. using java-scripts in pre-request script tab"
		},
		{
			"name": "COLLECTION VARIABLES USAGE",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{cProtocol}}://{{cBaseURL}}/public/v2/users",
							"protocol": "{{cProtocol}}",
							"host": [
								"{{cBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// CAPTURE RESPONSE ATTRIBUTES\r",
									"\r",
									"console.log(\"The response code is \"+pm.response.code);\r",
									"console.log(\"The response message is \"+pm.response.status);\r",
									"console.log(\"The response code is \"+pm.response.code+\" \"+pm.response.status);\r",
									"console.log(\"The response time is \"+pm.response.responseTime+\" ms\");\r",
									"console.log(\"The response headers are \");\r",
									"console.log(pm.response.headers);\r",
									"console.log(\"The response body is \")\r",
									"console.log(pm.response.json());\r",
									"console.log(\"The response body size is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"// CAPTURE REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(\"The request name is \"+pm.info.requestName);\r",
									"console.log(\"The request URL is \"+pm.request.url);\r",
									"console.log(\"The request HTTP method used is \"+pm.request.method);\r",
									"console.log(\"The request body used is \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request headers are \");\r",
									"console.log(pm.request.headers);\r",
									"console.log(\"The request body size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"// PRINT COLLECTION VARIABLES VALUES\r",
									"\r",
									"console.log(\"The value of cGender is \"+pm.collectionVariables.get(\"cGender\"));\r",
									"console.log(\"The value of cStatus is \"+pm.collectionVariables.get(\"cStatus\"));\r",
									"\r",
									"// DELETE COLLECTION VARIABLES\r",
									"\r",
									"pm.collectionVariables.unset(\"cGender\");\r",
									"pm.collectionVariables.unset(\"cStatus\");\r",
									"\r",
									"// PRINT COLLECTION VARIABLES VALUES AFTER DELETING THEM\r",
									"\r",
									"console.log(\"The value of cGender after deleting it is \"+pm.collectionVariables.get(\"cGender\"));\r",
									"console.log(\"The value of cStatus  after deleting it is \"+pm.collectionVariables.get(\"cStatus\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// order of test execution in Postman\r",
									"// preRequest > api > postResponse\r",
									"\r",
									"pm.collectionVariables.set(\"cGender\", \"male\");\r",
									"pm.collectionVariables.set(\"cStatus\", \"active\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"{{cGender}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"{{cStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cProtocol}}://{{cBaseURL}}/public/v2/users",
							"protocol": "{{cProtocol}}",
							"host": [
								"{{cBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cProtocol}}://{{cBaseURL}}/public/v2/users/7862084",
							"protocol": "{{cProtocol}}",
							"host": [
								"{{cBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7862084"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{cProtocol}}://{{cBaseURL}}/public/v2/users/7862084",
							"protocol": "{{cProtocol}}",
							"host": [
								"{{cBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7862084"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. a collection variable can be accessed by all the APIs, by all the folders in the same collection\n    \n2. other collections cannot access the collection variables defined for another collection\n    \n3. we can create collection variables in 3 ways:\n    \n    1. step by step wizard\n        \n    2. manual way\n        \n    3. using java-scripts in pre-request script tab"
		},
		{
			"name": "NEGATIVE TESTING",
			"item": [
				{
					"name": "UNSUPPORTED HTTP METHODS TESTING",
					"item": [
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7845567",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7845567"
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7845544",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7845544"
									]
								}
							},
							"response": []
						}
					],
					"description": "**Verify if the server responds with 4xx client side error (405 Unsupported http method) when an API is executed with an invalid http method**\n\n1. Testing a GET API with POST or PUT or PATCH or DELETE http methods\n    \n2. Testing a POST API with GET or PUT or PATCH or DELETE http methods\n    \n3. Testing a PUT API with POST or GET or DELETE http methods\n    \n4. Testing a PATCH API with POST or GET or DELETE http methods\n    \n5. Testing a DELETE API with POST or PUT or PATCH or GET http methods",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Verify if response code=4xx client side error\", function () {\r",
									"    pm.response.to.be.clientError;\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "BROKEN ENDPOINTS TESTING",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/7845544",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"7845544"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/7856973",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"7856973"
									]
								}
							},
							"response": []
						}
					],
					"description": "Verify if the server responds with 4xx client side error when an API is executed with an invalid endPoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Verify if response code=4xx client side error\", function () {\r",
									"    pm.response.to.be.clientError;\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "PAYLOAD TAMPERING",
					"item": [
						{
							"name": "CREATE USER API-INVALID DATA TYPE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"12345*&^%$\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA FIELDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Kiran\",\r\n    \"sex\": \"female\",\r\n    \"email-address\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA LENGTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "{{$randomUserAgent}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kiran is a trainer, he is teaching us Postman automation and this tool is easy to learn\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "Verify if the server responds with 4xx client side error when an API is executed with an invalid payload such as _invalid data types, invalid data lengths, invalid data format, invalid data fields_ etc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Verify if response code=4xx or 5xx error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								]
							}
						}
					]
				}
			],
			"description": "1. Unsupported http methods testing\n    \n2. Broken endpoints testing\n    \n3. Payload tampering testing"
		},
		{
			"name": "API CHAINING AUTOMATION",
			"item": [
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// API CHAINING AUTOMATION CODE\r",
									"\r",
									"var extractedID = pm.response.json().id;\r",
									"pm.globals.set(\"globalID\", extractedID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Extracting the response from 1 API and supplying it as request to another dependent API is called API chaining automation testing.\n\nCREATE USER (POST) > EXTRACT THE ID VALUE > UPDATE USER API (PATCH) > DELETE USER API (DELETE)"
		},
		{
			"name": "E2E API AUTOMATION TESTING",
			"item": [
				{
					"name": "CREATE A USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender in the response body is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"  //  pm.expect(pm.response.json().gender).to.be.oneOf(\"male\", \"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status in the response body is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// API CHAINING AUTOMATION CODE\r",
									"\r",
									"var extractedID = pm.response.json().id;\r",
									"pm.globals.set(\"globalID\", extractedID);\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL CHECKS\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF USER IS CREATED\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY IF USER IS CREATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// VERIFY IF USER IS CREATED\r",
									"\r",
									"pm.test(\"Verify if user is created with id : \"+pm.globals.get(\"globalID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalID\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL CHECKS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"UPDATE THE CREATED USER\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE THE CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is received from the server\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\").and.to.include(\"name\").and.to.include(\"status\").and.to.include(\"id\").and.to.include(\"gender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Response headers do not include the Server header\", function () {\r",
									"    pm.expect(pm.response.headers.has('Server')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Gender in the response body is either male or female\", function () {\r",
									"    var gender = pm.response.json().gender;\r",
									"    pm.expect(gender).to.satisfy(function (value) {\r",
									"        return value === \"male\" || value === \"female\";\r",
									"    }, \"Gender should be either male or female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status in the response body is either active or inactive\", function () {\r",
									"    var status = pm.response.json().status;\r",
									"    pm.expect(status).to.satisfy(function (value) {\r",
									"        return value === \"active\" || value === \"inactive\";\r",
									"    }, \"Status should be either active or inactive\");\r",
									"});\r",
									"\r",
									"// API CHAINING AUTOMATION CODE\r",
									"\r",
									"var extractedName = pm.response.json().name;\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL CHECKS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF USER IS UPDATED\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY IF USER IS UPDATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// VERIFY IF USER IS UPDATED\r",
									"\r",
									"pm.test(\"Verify if user is updated with id : \"+pm.globals.get(\"globalID\")+\" & with name: \"+pm.globals.get(\"globalName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL CHECKS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"DELETE THE CREATED USER\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE THE CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL CHECKS\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF USER IS DELETED\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY IF USER IS DELETED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if gender in the response body=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status in the response body=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[9].status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project specific data\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// VERIFY IF USER IS DELETED\r",
									"\r",
									"pm.test(\"Verify if user is deleted with id : \"+pm.globals.get(\"globalID\")+\" & with name: \"+pm.globals.get(\"globalName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalID\"));\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL CHECKS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "CREATE A USER (POST) > VERIFY IF USER IS CREATED (GET) > UPDATE THE CREATED USER (PATCH) > VERIFY IF USER IS UPDATED (GET) > DELETE THE CREATED USER (DELETE) > VERIFY IF USER IS DELETED (GET)"
		},
		{
			"name": "PERFORMANCE TESTING",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7845544",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7845544"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Performance testing is verify if the server still responds to all its clients with below KPI metrics, when vUsers/clients bombard the server at the same time for ‘x’ seconds/minutes:**\n\n1. **response code=2xx**\n    \n2. **response time=within agreed SLA**\n    \n3. **response body is received, valid & complete**",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Verify if response code is 2xx Success response code\", function () {\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response body is received from server\", function () {\r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response time < 2000 ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "cProtocol",
			"value": "https",
			"type": "default"
		},
		{
			"key": "cBaseURL",
			"value": "gorest.co.in",
			"type": "string"
		}
	]
}